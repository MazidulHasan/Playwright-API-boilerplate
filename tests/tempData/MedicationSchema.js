// src/data_models/MedicationSchema.js
import Ajv from 'ajv';
import addFormats from 'ajv-formats';
import { logger } from '../../../support/commonUtility/API/logger'; // Ensure logger path is correct

// --- Request Schema Definition ---
export const medicationRequestSchema = {
  $schema: 'http://json-schema.org/draft-07/schema#',
  title: 'Medication Request Payload',
  description: 'Schema defining the structure for creating/updating medication',
  type: 'object',
  properties: {
    medName: { type: 'string', maxLength: 100, description: 'Name of the medication' },
    medSummary: { type: ['string', 'null'], maxLength: 500, description: 'Summary or description (nullable)' }, // Allow null
    strength: { type: ['string', 'null'], maxLength: 50, description: 'Dosage strength (nullable)' }, // Allow null
    attachment: { type: ['string', 'null'], format: 'uri', description: 'URL link to an attachment (nullable)' }, // Allow null
    controlledSubstance: { type: 'boolean', description: 'Is it a controlled substance?' },
    prescriber: {
      type: ['object', 'null'], // Allow null
      properties: {
        name: { type: 'string', maxLength: 100, description: "Prescriber's name" },
        licenseNumber: { type: ['string', 'null'], maxLength: 20, description: "Prescriber's license number (required if controlled, nullable otherwise)" } // Allow null
      },
      required: ['name'], // Name is always required if prescriber object exists
      additionalProperties: false, // Strict within prescriber object
    },
  },
  required: ['medName', 'controlledSubstance'], // Define top-level required fields for request
  additionalProperties: false, // Disallow extra fields in requests
  dependencies: {
    // If 'attachment' is present (and not null), 'medSummary' must also be present (and not null)
    attachment: {
       if: { properties: { attachment: { not: { type: "null" } } } },
       then: { required: ["medSummary"], properties: { medSummary: { not: { type: "null" } } } }
    },
    // Conditional requirements based on 'controlledSubstance'
    controlledSubstance: {
      oneOf: [
        { // Case 1: controlledSubstance is true
          properties: {
            controlledSubstance: { const: true },
            prescriber: { // Prescriber object is required
              type: 'object', // Must be an object (not null)
              properties: { // Define properties again within this scope if needed, or rely on top-level
                 name: { type: 'string' }, // Ensure name is present
                 licenseNumber: { type: 'string', minLength: 1 } // Require non-null, non-empty license number
              },
              required: ['name', 'licenseNumber'], // Both required within prescriber object
            },
          },
          required: ['prescriber'], // Make the prescriber object itself required
        },
        { // Case 2: controlledSubstance is false
          properties: {
            controlledSubstance: { const: false },
            // No *additional* requirements on prescriber object structure here.
            // It can be null, or an object with just 'name'.
          },
        },
      ],
    },
  },
};


// --- Response Schema Definition ---
export const medicationResponseSchema = {
  $schema: 'http://json-schema.org/draft-07/schema#',
  title: 'Medication API Response',
  description: 'Schema defining the structure of a medication object returned by the API',
  type: 'object',
  properties: {
    // Include properties from the request schema (adjust nullability if response differs)
    medName: { type: 'string', maxLength: 100 },
    medSummary: { type: ['string', 'null'], maxLength: 500 },
    strength: { type: ['string', 'null'], maxLength: 50 },
    attachment: { type: ['string', 'null'], format: 'uri' },
    controlledSubstance: { type: 'boolean' },
    prescriber: {
      type: ['object', 'null'],
      properties: {
        name: { type: 'string', maxLength: 100 },
        licenseNumber: { type: ['string', 'null'], maxLength: 20 }
      },
      required: ['name'],
      additionalProperties: false,
    },

    // --- Add EXTRA fields expected ONLY in the response ---
    formId: { // Assuming formId is generated by the server
      type: 'string',
      format: 'uuid', // Example: Assuming it's a UUID
      description: 'Unique identifier for the medication record (UUID format)',
    },
    programName: {
      type: ['string', 'null'], // Allow null if program might not always be assigned
      description: 'Name of the associated program (nullable)',
    },
    createdAt: {
      type: 'string',
      format: 'date-time', // Expect standard ISO 8601 format
      description: 'Timestamp when the record was created',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
      description: 'Timestamp when the record was last updated',
    },
  },
  // Define fields always required in a valid response
  required: [
    'formId', // Server-generated ID is usually required
    'medName',
    'controlledSubstance',
    'createdAt',
    'updatedAt',
    // Add other fields that MUST be present in every valid response
  ],
  additionalProperties: false, // Be strict about the response structure
};


/**
 * Compiles and returns Ajv validation functions for medication schemas.
 * @returns {{validateRequest: import('ajv').ValidateFunction, validateResponse: import('ajv').ValidateFunction}}
 */
function compileMedicationValidators() {
  try {
    // Configure Ajv instance
    const ajv = new Ajv({
        allErrors: true, // Show all errors
        strict: "log",   // Recommended for development to catch schema issues
        coerceTypes: true // Automatically convert types where possible (e.g., string '5' to number 5 if schema expects number) - use with caution
    });
    addFormats(ajv); // Add formats like 'uri', 'date-time', 'uuid'

    // Compile request schema
    const validateRequest = ajv.compile(medicationRequestSchema);
    logger.info('Medication Request JSON Schema compiled.');

    // Compile response schema
    const validateResponse = ajv.compile(medicationResponseSchema);
    logger.info('Medication Response JSON Schema compiled.');

    return { validateRequest, validateResponse };
  } catch (error) {
    logger.error('Failed to compile Medication JSON Schemas:', error);
    // Throw a fatal error as validation cannot proceed
    throw new Error(`Schema compilation failed: ${error.message}`);
  }
}

// Export the compiled validation functions for use elsewhere
const { validateRequest, validateResponse } = compileMedicationValidators();
export const validateMedicationRequestSchema = validateRequest;
export const validateMedicationResponseSchema = validateResponse;